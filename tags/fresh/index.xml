<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>fresh on 週刊Deno</title><link>https://uki00a.github.io/deno-weekly/tags/fresh.html</link><description>Recent content in fresh on 週刊Deno</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sun, 16 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://uki00a.github.io/deno-weekly/tags/fresh/index.xml" rel="self" type="application/rss+xml"/><item><title>2022/10/10〜2022/10/16の最新情報</title><link>https://uki00a.github.io/deno-weekly/articles/2022/10/16.html</link><pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/2022/10/16.html</guid><description>deno taskの安定化について deno taskコマンドを安定化することが検討されているようです。
以下のPRではdeno taskを実行した際の警告メッセージが削除されています。
feat(task): remove warning about being unstable (#16281)
この変更はv1.27での導入が検討されているようです。
deno lspでtextDocument/inlayHintが実装 以下のPRでdeno lspにtextDocument/inlayHintが実装されています。
feat: support inlay hints (#16287)
textDocument/inlayHintの挙動については、TypeScript公式の以下のページがわかりやすそうです。
Inlay Hints こちらについてもv1.27でのリリースが検討されているようです
Bartek Iwańczuk&amp;rsquo;s &amp;ldquo;Vite Got Deno-fied&amp;rdquo; at ViteConf 2022 Bartek Iwańczuk氏によるViteConf 2022での発表内容が公開されています。
Bartek Iwańczuk&amp;rsquo;s &amp;ldquo;Vite Got Deno-fied&amp;rdquo; at ViteConf 2022 DenoでViteの開発環境をセットアップし、Deno Deployへデプロイするまでの手順が解説されています。
https://twitter.com/deno_land/status/1580356550966722560
denoland/fresh_charts Deno公式でFresh向けのチャートライブラリが公開されています。
denoland/fresh_charts チャートを描画するための&amp;lt;Chart&amp;gt;コンポーネントやハンドラ向けのユーティリティなどが提供されているようです。
Chart.jsやred-agate-svg-canvasなどを活用して作成されているようです。
https://github.com/denoland/fresh_charts</description></item><item><title>2022/10/03〜2022/10/09の最新情報</title><link>https://uki00a.github.io/deno-weekly/articles/2022/10/09.html</link><pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/2022/10/09.html</guid><description>Deno v1.26.1 Deno v1.26.1がリリースされました。
Node-APIの実装 DenoでNode-APIが実装されました。
Node-APIで実装されたアドオンのrequire()での読み込みがサポートされます。
Node-APIを有効化するためには、今のところ、--allow-ffiの指定が必要なようです。 (ただし、将来的にオプションが変わる可能性はあるようです)
いまのところ、lightningcssやlz4-napiなどが動作することが確認されているようです。(napi-rs/napi-rs#900)
Node.js互換に関する改善 Node-APIの実装以外に関する改善として、npm:経由で読まれたパッケージの依存関係の解析結果がキャッシュされるようになりました。
これにより、キャッシュが存在する場合は、Viteの起動が3倍近く高速化されているようです。
キャッシュの仕組みはSQLiteをベースに実装されており、$DENO_DIR/node_analysis_cache_v1にデータベースが作成されます。
その他の改善として、deno cacheでのnpm:のサポートやrequire()でのJSONファイルの読み込みなどがサポートされています。
Web Cache APIのバグ修正 Deno v1.26で追加されたCache APIに関するバグ修正が実施されています。
Cache.put()に渡したResponseオブジェクトがconsumed状態にならない問題が修正 Cache.put()に渡したResponseに紐づくReadableStreamの読み込みでエラーが起きると、リソースリークが発生する問題が修正 Cache.put()で書き込みに失敗したときに、中途半端にキャッシュが保存されないように改善 その他の修正 --unstableを付けないと、Deno.hostname()がundefinedになる問題が修正 (Deno.hostname()はDeno v1.26で安定化されています) リクエストボディの読み込みが最適化 (perf(ext/fetch): consume body using ops (#16038)) 一度、Request#text()などでリクエストボディを消費したにも関わらず、再度Request.bodyを参照するとRequest.bodyUsedがfalseに戻ってしまう問題が修正 Deno.serve()で、ステータスコードが204の際はContent-Lengthが設定されないように修正 SubtleCrypto.deriveBits()でlength引数に与えられた長さが考慮されない問題が修正 https://github.com/denoland/deno/releases/tag/v1.26.1
deno_std v0.159.0 deno_std v0.159.0がリリースされました。
std/textprotoの非推奨化 以下の理由などから、std/textprotoが非推奨化されました。
現在はdeno_stdの内部で使われていないこと deno_stdの方針として、GoスタイルのAPI(Deno.Reader/Deno.Writer)からWeb Streams APIベースへ移行されていること 今後は、このモジュールの使用は避けることが推奨されます。
std/streams/conversion: iterateReaderのバグ修正 iterateReaderに長年存在していたバグが修正されています。
具体的な修正内容については、以下の記事で詳細に内容が解説されています。
Deno のめっちゃ難しいバグを修正した - Qiita また、この修正に関連してiterateReader()の実装が効率化されています。(perf(streams): memory optimizations by avoiding large buffer allocation in a loop (#2748))</description></item><item><title>2022/09/05〜2022/09/11の最新情報</title><link>https://uki00a.github.io/deno-weekly/articles/2022/09/11.html</link><pubDate>Sun, 11 Sep 2022 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/2022/09/11.html</guid><description>Deno v1.25.2 Deno v1.25.2がリリースされました。
(破壊的変更) Node.js互換モード(--compat)の削除 Deno v1.25.0でnpmパッケージのサポートが追加されたため、Node.js互換モード(--compat)が削除されました。
FFI Rustのdynasmrt crateを使用して、JITの仕組みが再実装されています。
こちらのコメントによると、これにより以下の点などが改善されているようです。
Windows x64 PCでもv8 Fast APIを使用した最適化が適用されるようになりました。 Denoからtinyccへの依存がなくなりました。 SElinuxが有効化されている環境でもFFIが動作するようになりました。 その他には、bool型のサポートが追加されています。
const dylib = Deno.dlopen(libPath, { &amp;#34;do_something_with_bool&amp;#34;: { parameters: [&amp;#34;bool&amp;#34;], result: &amp;#34;bool&amp;#34;, }, }); npmパッケージサポートの改善 pre-releaseタグがサポートされています。(例: npm:some-package@1.2.3-alpha.4)
また、パッケージのバージョンが指定されなかった際に、そのパッケージの最新バージョンがインストールされるように改善されています。(dist-tagsのlatest で指定されたバージョンがダウンロードされます)
その他には、npm:経由で読み込んだパッケージ内ではwindow変数が削除され、cjsモジュールが再帰的に解析されるように改善されています。
これによりVue.jsがimportできるようになっているようです。
import { createApp } from &amp;#34;npm:vue@3.2.39&amp;#34; console.log(createApp); deno_std v0.155.0 deno_std v0.155.0がリリースされました。
std/encoding/csv: stringify()のシグネチャが変更 (破壊的変更) stringify()が同期的に動作するように変更されています。
また、columnsオプションがオプショナルに変更されています。
具体的には、以下のように型定義が変更されています。
v0.154.0:
stringify( data: DataItem[], columns: Column[], options?: StringifyOptions, ): Promise&amp;lt;string&amp;gt; v0.155.0:</description></item><item><title>Fresh v1.1</title><link>https://uki00a.github.io/deno-weekly/articles/fresh/v1.1.html</link><pubDate>Sun, 11 Sep 2022 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/fresh/v1.1.html</guid><description>Fresh v1.1がリリースされました。
この記事では主な変更点などについて解説します。
アップデート用スクリプトの追加 Freshのアップデート用スクリプトが追加されています。
$ deno run -A https://fresh.deno.dev/update . このスクリプトを実行すると、各種依存関係や後述するcompilerOptionsやTwindプラグインなどに関する変更が適用されます。
compilerOptions.jsxとcompilerOptions.jsxImportSourceのサポート Freshのプロジェクトの初期化時に、compilerOptions.jsxとcompilerOptions.jsxImportSourceが自動で設定されるようになりました。
これにより、.jsx/.tsxファイルで以下2行の指定が不要になります。
/** @jsx h */ import { h } from &amp;#34;preact&amp;#34;; 前述のアップデートスクリプトを実行すると、既存のプロジェクトにもこの設定が適用されます。
プラグインシステム ユーザがFreshの挙動を拡張できるようにするために、プラグインシステムが実装されました。
現時点では、生成されたHTMLに対するスクリプトやスタイルの注入などがサポートされています。将来的には、プラグイン経由でRouteやMiddlewareなどを追加できるようにすることが予定されているようです。
例として、公式でTwindプラグインが提供されており、start()のpluginsオプションで有効化できます。
// main.ts import { start } from &amp;#34;$fresh/server.ts&amp;#34;; import twindPlugin from &amp;#34;$fresh/plugins/twind.ts&amp;#34;; import manifest from &amp;#34;./fresh.gen.ts&amp;#34;; import twindConfig from &amp;#34;./twind.config.ts&amp;#34;; await start(manifest, { plugins: [twindPlugin(twindConfig)] }); このTwindプラグインを有効化すると、twを使わずにclassを指定できるようになります (PreactのOption Hooksを使用して twが自動で適用されます)
&amp;lt;div class=&amp;#34;font-bold&amp;#34;&amp;gt;foobar&amp;lt;/div&amp;gt; 前述のアップデートスクリプトを実行することで、twを使わずにclassを記述する形式へ自動で変換されます。
Preact Devtoolsのサポート Preact Devtoolsのサポートが追加されています。
devモード(deno task start)時は自動で有効化されるため、特に設定などは不要です。</description></item><item><title>2021/08/01〜2022/08/07の最新情報</title><link>https://uki00a.github.io/deno-weekly/articles/2022/08/07.html</link><pubDate>Sun, 07 Aug 2022 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/2022/08/07.html</guid><description>Deno v1.24.2 Deno v1.24.2がリリースされました。
FFIに関する改善 Deno.UnsafePointerView#getArrayBufferがpointerが指すデータのコピーではなく、pointerが指すデータを直接返すように修正されています。
また、Deno.PointerValueが追加されています。 これに合わせて、ポインタを取り扱う各APIの戻り値などでもこの型が使用されるように修正されています。
その他には、戻り値が64ビット値の関数に対してもV8 Fast API Callsによる最適化が適用されるようになりました。
その他の変更点 プロパティにErrorオブジェクトが設定されたオブジェクトをthrowすると、プロセスがパニックする問題が修正されました。 deno vendor: dynamic importに失敗した際に、プロセスがパニックする問題が修正されました。 deno lsp: import節の入力補完において、レジストリ補完の最中のみ/がコミット文字として使用されるように修正されました。 https://github.com/denoland/deno/releases/tag/v1.24.2
deno_std v0.151.0 deno_std v0.151.0がリリースされました。
Node.jsの互換レイヤーに関するバグ修正や機能の追加が実施されています。
変更点:
node/fs: fs.existsSync()が例外をthrowする可能性がある問題が修正されました。 node/fs: fs.watchFile()とfs.unwatchFile()が実装されました。 node/http(s): http.request()などでprotocolを省略した際に、デフォルトで適切なプロトコルが設定されるように修正されました。 https://github.com/denoland/deno_std/releases/tag/0.151.0
Deno Merch Deno公式のショップサイトが公開されました。
https://merch.deno.com/ ソースコードも公開されており、Fresh/Twind/SWR/GraphQL Storefront API (Shopify)をベースに実装されているようです。
https://github.com/denoland/merch
Freshのロードマップ Freshのロードマップが公開されました。
Roadmap (#563) 直近では、以下の変更が予定されているようです。
プラグインシステムの実装 (現状、Twindプラグインの実装が進行しているようです) &amp;lt;Head&amp;gt;コンポーネントの非推奨化 (&amp;lt;head&amp;gt;タグによって直接メタ情報を埋め込めるようにする予定のようです) https://github.com/denoland/fresh/issues/563
PrismaのDenoサポートについて Prismaの以下のissueで、Denoのサポートについて議論されています。</description></item><item><title>2021/07/25〜2022/07/31の最新情報</title><link>https://uki00a.github.io/deno-weekly/articles/2022/07/31.html</link><pubDate>Sun, 31 Jul 2022 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/2022/07/31.html</guid><description>Deno v1.24.1 Deno v1.24.1がリリースされました。
このリリースはバグ修正がメインです。
&amp;quot;unhandledrejection&amp;quot;イベントに関する修正 &amp;quot;unhandledrejection&amp;quot;イベントのリスナに関する型定義が修正されています。
また、モジュールのトップレベルで同期的にエラーが発生した際にも&amp;quot;unhandledrejection&amp;quot;イベントが発火されるように修正されています。
Deno.Child.unref()に関する修正 Deno.Child.unref()を呼ぶと、Deno.Child.stdoutやDeno.Child.stderrもunrefされるように修正されています。
その他の変更点 型チェック時(--check)に、TypeScriptのjsxFactoryとjsxFragmentFactoryオプションが自動で設定される問題が修正されています。
https://github.com/denoland/deno/releases/tag/v1.24.1
deno_std v0.150.0 deno_std v0.150.0がリリースされました。
http/http_errors createHttpErrorでheadersオプションがサポートされています。
import { createHttpError } from &amp;#34;https://deno.land/std@0.150.0/http/http_errors.ts&amp;#34;; import { Status, STATUS_TEXT } from &amp;#34;https://deno.land/std@0.150.0/http/http_status.ts&amp;#34;; const error = createHttpError( Status.Unauthorized, STATUS_TEXT[Status.Unauthorized], { headers: { &amp;#34;WWW-Authenticate&amp;#34;: &amp;#34;Basic&amp;#34; } } ); error.headers; // =&amp;gt; `Headers { &amp;#34;www-authenticate&amp;#34;: &amp;#34;Basic&amp;#34; }` io/writers StringWriterにデータを書き込む際に、引数のUint8Arrayがコピーされるようになりました。
引数に渡したUint8Arrayが別の箇所で変更されると、StringWriter#toStringが返却する文字列にも影響が出てしまう問題があったようです。
import { StringWriter } from &amp;#34;https://deno.land/std@0.150.0/io/writers.ts&amp;#34;; const encoder = new TextEncoder(); const w = new StringWriter(); const bytes = encoder.</description></item><item><title>2021/06/27〜2022/07/03の最新情報</title><link>https://uki00a.github.io/deno-weekly/articles/2022/07/03.html</link><pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/2022/07/03.html</guid><description>Deno v1.23.2 Deno v1.23.2がリリースされました。
スレッドセーフコールバックのサポート(FFI) 例えば、メインスレッドで登録したコールバック(Deno.UnsafeCallback)をWorkerスレッドから呼び出したり、その逆にWorkerスレッドで登録したコールバックをメインスレッドから呼び出すことができるようになりました。
また、Deno.UnsafeCallbackにrefとunrefメソッドが実装されており、refを呼ぶことでDenoプロセスの停止を防止することができます。(Deno.refTimerなどと同様の挙動)
https://github.com/denoland/deno/pull/14942
その他の変更点 FFIで空のArrayBufferを渡すとプロセスパニックする問題が修正されています。 deno lspのdeno/cacheメソッド(vscode-denoだとDeno: Cache Dependenciesコマンド)で依存関係をキャッシュした際に、TypeScriptのランゲージサービスが自動で再起動されるようになりました。 Deno.bench()やDeno.test()を含むファイルをdeno runで実行すると、エラーが発生する問題が修正されています。 https://github.com/denoland/deno/releases/tag/v1.23.2
deno_std v0.146.0 deno_std v0.146.0がリリースされました。
collections: BSTreeとRBTreeのリネーム collectionsモジュールで提供されているBSTreeがBinarySearchTreeに、RBTreeがRedBlackTreeにリネームされています。
その他の変更点 testing/asserts: assertEqualsで同じ要素を持つSet同士を比較しているにも関わらず、例外が発生するケースがあったため、修正されています。 streams/delimiter: TextLineStreamで大きなチャンクを処理する際にMaximum call stack size exceededエラーが発生することがある問題が修正されました。 node/util: util.inspect()やutil.format()で6つを超える要素数の配列が正しくフォーマットされるように修正されています。 https://github.com/denoland/deno_std/releases/tag/0.146.0
JITコンパイラによるFFIの最適化 Deno本体へのJITコンパイラの導入により、FFIバインディングを最適化するPRが作成されています。
perf(ext/ffi): JIT compiler for FFI (#15006)
内部的には、tinyccが使用されているようです。
https://github.com/denoland/deno/pull/15006
Fresh v1 Fresh v1.0.0がリリースされました。
これに合わせて、Freshのリポジトリがdenoland organization配下に移動されています。
また、Deno公式でFreshの紹介記事が公開されています。
Fresh 1.0 https://github.com/denoland/fresh
denoland/meet-me Deno公式で、Calendlyのクローンアプリが公開されています。</description></item><item><title>2021/06/20〜2022/06/26の最新情報</title><link>https://uki00a.github.io/deno-weekly/articles/2022/06/26.html</link><pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/2022/06/26.html</guid><description>Deno v1.23.1 Deno v1.23.1がリリースされました。
FFI関連の変更点 破壊的変更としてDeno.UnsafePointerが削除されました。 (正確にはDeno.UnsafePointer.ofのみ残されています) 今後、ポインタはbigintで表現されます。
その他には、unstable APIとしてDeno.UnsafeCallbackが追加されています。 JavaScriptの関数を関数ポインタとして受け渡すために利用できます。
deno fmtの改善 deno fmtコマンドがnode_modulesと.gitディレクトリを無視するようになりました。
また、JavaScriptファイルのパースに失敗した際に、deno fmt --checkがちゃんと失敗するように修正されています。
その他の変更点 fetchの呼び出し時に、デフォルトでAccept-Language: *ヘッダが設定されるように修正されました。 deno replコマンドで、直前の文字が空白のときにTabキーを押すと、タブ(\t)が挿入されるように修正されました。 deno runコマンドで.d.ctsや.d.mtsファイルを実行すると、プロセスがパニックする問題が修正されました。 https://github.com/denoland/deno/releases/tag/v1.23.1
deno_std v0.145.0 deno_std v0.145.0がリリースされました。
std/encoding/json/stream std/encoding/json/streamが追加されました。
このモジュールでは、下記4フォーマットでのストリーミングがサポートされています。
JSON Lines ndjson JSON Text Sequences Concatenated JSON JSONParseStreamは上記の上から3つのフォーマットをサポートしています。
import { JSONParseStream } from &amp;#34;https://deno.land/std@0.145.0/encoding/json/stream.ts&amp;#34;; import { readableStreamFromIterable } from &amp;#34;https://deno.land/std@0.145.0/streams/conversion.ts&amp;#34;; const readable = readableStreamFromIterable([ `{&amp;#34;name&amp;#34;: &amp;#34;foo&amp;#34;}`, `{&amp;#34;a&amp;#34;: 1, &amp;#34;b&amp;#34;: true}`, ]) .</description></item><item><title>2021/06/13〜2022/06/19の最新情報</title><link>https://uki00a.github.io/deno-weekly/articles/2022/06/19.html</link><pubDate>Sun, 19 Jun 2022 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/2022/06/19.html</guid><description>Deno v1.23 Deno v1.23がリリースされました。
以下の記事に変更点をまとめたため、詳しくはこちらを参照いただければと思います。
Deno v1.23 deno_std v0.144.0 deno_std v0.144.0がリリースされました。
encoding/front_matter 新規モジュールとしてencoding/front_matterが追加されました。
import { extract } from &amp;#34;https://deno.land/std@0.144.0/encoding/front_matter.ts&amp;#34;; const { attrs, body } = extract&amp;lt;{ title: string, date: Date }&amp;gt;(`--- title: foobar date: 2022-06-12 --- Hello`); console.assert(attrs.title === &amp;#34;foobar&amp;#34;); console.assert(attrs.date instanceof Date); console.assert(body === &amp;#34;Hello&amp;#34;); collections collections/mod.tsをimportすると警告が表示されるようになりました。
必要に応じて、collections/deep_mergeやcollections/group_byなどの各ファイルを個別にimportすることが推奨されます。
node process.stdoutとprocess.stderrに下記メソッドが実装されています。
cursorTo moveCursor clearLine clearScreenDown https://github.com/denoland/deno_std/releases/tag/0.144.0
Freshのアップデート (CLIの削除) FreshからCLIが削除されています。
feat: remove fresh cli, do manifest generation in process (#223)</description></item><item><title>2021/06/06〜2022/06/12の最新情報</title><link>https://uki00a.github.io/deno-weekly/articles/2022/06/12.html</link><pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/2022/06/12.html</guid><description>Deno v1.22.3 Deno v1.22.3がリリースされました。
主な変更点:
fetch APIの引数にURLオブジェクト渡す形式が非推奨ではなくなりました。(TypeScript公式の型定義でもサポートされたため) // Deno v1.22.3までは、下記の形式は非推奨でした const res = await fetch(new URL(&amp;#34;https://example.com&amp;#34;)); Import Mapファイルなどの.jsonや.jsonc形式のファイルが変更されたときに、deno lspが自動で変更を検知してくれるようになりました。 --watchオプションで、dynamic importされるファイルが監視されない問題が修正されました。 エラー以外の値がthrowされた際にコンソールへ出力される内容が改善されました。 https://github.com/denoland/deno/releases/tag/v1.22.3
deno_std v0.143.0 deno_std v0.143.0がリリースされました。
http/http_statusでの破壊的変更について STATUS_TEXTがMap&amp;lt;Status, string&amp;gt;からReadonly&amp;lt;Record&amp;lt;Status, String&amp;gt;&amp;gt;へ変更されています。(破壊的変更)
その他にも、いくつかのヘルパー関数やタイプが追加されています。
import { isErrorStatus, STATUS_TEXT } from &amp;#34;https://deno.land/std@0.143.0/http/http_status.ts&amp;#34;; STATUS_TEXT[404]; // =&amp;gt; &amp;#34;Not Found&amp;#34; isErrorStatus(404); // =&amp;gt; true isErrorStatus(200); // =&amp;gt; false flagsモジュールでnegatableオプションがサポート ここで指定されたフラグのみが、--no-プレフィックスの付与による否定がサポートされます。
import { parse } from &amp;#34;https://deno.land/std@0.143.0/flags/mod.ts&amp;#34;; parse([&amp;#34;deno&amp;#34;, &amp;#34;fmt&amp;#34;, &amp;#34;--no-config&amp;#34;], { string: [&amp;#34;config&amp;#34;], negatable: [&amp;#34;config&amp;#34;], }); // =&amp;gt; { _: [ &amp;#34;deno&amp;#34;, &amp;#34;fmt&amp;#34; ], config: false } parse([&amp;#34;deno&amp;#34;, &amp;#34;fmt&amp;#34;, &amp;#34;--no-config&amp;#34;], { string: [&amp;#34;config&amp;#34;], }); // =&amp;gt; { _: [ &amp;#34;deno&amp;#34;, &amp;#34;fmt&amp;#34; ], &amp;#34;no-config&amp;#34;: true } dotenvモジュールでインラインコメントがサポート #に続けてコメントを記述できます。</description></item><item><title>2021/02/28〜2022/03/06の最新情報</title><link>https://uki00a.github.io/deno-weekly/articles/2022/03/06.html</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/2022/03/06.html</guid><description>Deno v1.19.2 Deno v1.19.2がリリースされました。
リモートスクリプトでのdeno.json(c)の自動読み込みが無効化 Deno v1.18でdeno.json(c)の自動読み込みがサポートされました。
このリリースでは、リモートスクリプト実行時のdeno.json(c)の自動探索が無効化されています。
リモートスクリプトを実行する際に、ローカルのdeno.json(c)が読まれてしまうことによる不整合を防止することが目的のようです。
Proposal: disable auto-discovery of config file for deno run
deno testの実行時はデフォルトで--no-promptが有効化 Deno v1.19で--promptがデフォルトで有効化されました。
しかし、deno testの実行時は--promptオプションの必要性が薄いため、このリリースで無効化されています。
その他の変更点 deno replでnullが適切に表示されない問題が修正されました。 非TTY環境でconsoleを使用した際の色付けが無効化されない問題が修正されました。 https://github.com/denoland/deno/releases/tag/v1.19.2
deno_std v0.128.0 deno_std v0.128.0がリリースされました。
新機能 streamsモジュールにTextLineStreamが追加されています。
import { TextLineStream } from &amp;#34;https://deno.land/std@0.128.0/streams/delimiter.ts&amp;#34;; const file = await Deno.open(&amp;#34;./path/to/file.txt&amp;#34;); const readable = file.readable .pipeThrough(new TextDecoderStream()) .pipeThrough(new TextLineStream()); for await (const line of readable) { console.log(line); } また、node/cryptoへのcrypto.</description></item><item><title>2021/02/21〜2022/02/27の最新情報</title><link>https://uki00a.github.io/deno-weekly/articles/2022/02/27.html</link><pubDate>Sun, 27 Feb 2022 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/2022/02/27.html</guid><description>Deno v1.19.1 Deno v1.19.1がリリースされました。
新機能としてDeno.dlopenでstatic変数の参照がサポートされています。
Deno.ForeignStatic その他にも、deno compileで--import-mapオプションがうまく動かなくなっていた問題が修正されています。
https://github.com/denoland/deno/releases/tag/v1.19.1
deno_std v0.127.0 deno_std v0.127.0がリリースされました。
dotenvの追加 deno-dotenvモジュールがdeno_stdにマージされました。
マイグレーション手順も公開されているので、もしdeno-dotenvを利用されていた場合は参考にするとよさそうです。
async/abortableの追加 Promiseをキャンセルできるようにするためのユーティリティが追加されています。
import { abortable } from &amp;#34;https://deno.land/std@0.127.0/async/abortable.ts&amp;#34;; import { delay } from &amp;#34;https://deno.land/std@0.127.0/async/delay.ts&amp;#34;; const controller = new AbortController(); const promise = delay(5000); setTimeout(() =&amp;gt; controller.abort(), 2000); await abortable(promise, controller.signal); // =&amp;gt; AbortError node fs: fs.realpath.nativeが追加されました。 tls: tls.createServerの基本的なサポートが追加されました。 その他 http/file_server: serveDir関数が追加されました。 testing/aserts: assertAlmostEqualsが追加されました。 https://github.com/denoland/deno_std/releases/tag/0.127.0
deno.json(c)でのImport Mapサポートについて deno.</description></item><item><title>2021/02/14〜2022/02/20の最新情報</title><link>https://uki00a.github.io/deno-weekly/articles/2022/02/20.html</link><pubDate>Sun, 20 Feb 2022 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/2022/02/20.html</guid><description>Deno v1.19 Deno v1.19がリリースされました。
--promptオプションの挙動がデフォルト化 例えば、以下のようなファイルがあったとします。
const content = await Deno.readTextFile(&amp;#34;README.md&amp;#34;); このファイルを権限なしで実行しようとすると、下記のように権限を付与するか尋ねられるようになります。
$ deno run main.ts ⚠️ ️Deno requests read access to &amp;#34;README.md&amp;#34;. Run again with --allow-read to bypass this prompt. Allow? [y/n (y = yes allow, n = no deny)] Deno v1.18以前の挙動に戻したいときは--no-promptを指定する必要があります。
deno vendorコマンドの追加 サードパーティモジュールもバージョン管理に含めたいなどの要求を解決すべく導入されたコマンドです。
具体的な使い方としては、下記のようにエントリポイントを指定します。
$ deno vendor mod.ts これにより、vendorディレクトリにmod.tsから依存されているサードパーティモジュールが保存されます。
また、vendorディレクトリに次のような内容でimport_map.jsonが作成されます。
{ &amp;#34;imports&amp;#34;: { &amp;#34;https://deno.land/&amp;#34;: &amp;#34;./deno.land/&amp;#34;, &amp;#34;https://unpkg.com/&amp;#34;: &amp;#34;./unpkg.com/&amp;#34; }, &amp;#34;scopes&amp;#34;: { &amp;#34;./unpkg.com/&amp;#34;: { &amp;#34;./unpkg.com/puppeteer@10.2.0/lib/esm/puppeteer/common/Debug.js&amp;#34;: &amp;#34;./unpkg.com/puppeteer@10.2.0/lib/esm/puppeteer/common/Debug.js&amp;#34;, &amp;#34;./unpkg.com/puppeteer@10.2.0/lib/esm/puppeteer/common/helper.js&amp;#34;: &amp;#34;./unpkg.com/puppeteer@10.2.0/lib/esm/puppeteer/common/helper.js&amp;#34; } } } deno runを実行する際にこのImport Mapファイルを指定することで、vendorディレクトリに保存されたサードパーティモジュールを透過的に読み込むことができます。</description></item><item><title>2021/11/01〜2021/11/07の最新情報</title><link>https://uki00a.github.io/deno-weekly/articles/2021/11/07.html</link><pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/2021/11/07.html</guid><description>2021年のDeno Advent Calendarが公開 Qiitaで2021年のDeno Advent Calendarが公開されました。
https://qiita.com/advent-calendar/2021/deno
deployctlがアーカイブ Deno Deployのコマンドラインツールであるdeployctlがアーカイブされました。
今後は代わりにDeno CLIを使って開発していくようアナウンスされています。
Deno Deploy Beta 3が来たぞ Freshのアップデート PreactベースのWebフレームワークであるFreshがアップデートされ、MiddlewareとCSPのサポートが追加されました。
Middlewareサポート Middlewareを利用する際は、pagesディレクトリ配下に下記のいずれかの名前のファイルを用意し、handler関数をexportする必要があります。
/_middleware.tsx /_middleware.ts /_middleware.jsx /_middleware.js export async function handler(req: Request, handle: () =&amp;gt; Promise&amp;lt;Response&amp;gt;) { const start = Date.now(); const resp = await handle(); const end = Date.now(); console.log(`${req.method}${req.url}- ${end - start}ms`); return resp; } CSPサポート CSPサポートを有効化したいときは、対象ページでcspオプションにtrueを設定したconfigオブジェクトをexportします。
import type { PageConfig } from &amp;#34;../deps.ts&amp;#34;; export const config: PageConfig = { csp: true }; 上記を実施しておくことで、特に設定をしなくとも自動でContent-Security-Policyヘッダを出力してくれます。</description></item><item><title>2021/10/04〜2021/10/10の最新情報</title><link>https://uki00a.github.io/deno-weekly/articles/2021/10/10.html</link><pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/2021/10/10.html</guid><description>Deno v1.14.3 Deno v1.14.3がリリースされました。
このリリースでは、バグ修正やパフォーマンスチューニングを中心に実施されています。
変更点:
fetchで不正な形式のヘッダを指定するとプロセスがパニックする問題が修正されました Deno.listenで抽象ソケットアドレスを指定するとプロセスがパニックする問題が修正されました REPLでglobalThisに代入するとプロセスがパニックする問題が修正されました Workerのmessageハンドラで投げられたエラーが報告されない問題が修正されました Workerのdeno.permissions.envオプションに配列を渡せるようになりました Deno.testでAggregateErrorが投げられた際の出力が改善されました Opの実行、RequestやResponseの作成、Headers.prototype.appendなどが最適化されました https://github.com/denoland/deno/releases/tag/v1.14.3
deno_std v0.110.0 deno_std v0.110.0がリリースされました。
std/nodeへの機能追加が実施されています。
変更点:
node/buffer: BufferでreadUIntLE及びreadUIntBEが実装されました node/crypto: scrypt, scryptSync, timingSafeEqual, 及びrandomUUIDが実装されました。 node/stream/web: 下記クラスが追加されました。 ReadableByteStreamController TransformStreamDefaultController ByteLengthQueuingStrategy CountQueuingStrategy TextEncoderStream TextDecoderStream node/os: tmpdirが実装されました https://github.com/denoland/deno_std/releases/tag/0.110.0
Freshのアップデート DenoのWebフレームワークであるFreshがアップデートされました。
&amp;lt;Head&amp;gt;コンポーネントがサポートされ、&amp;lt;head&amp;gt;配下に要素を追加できるようになっています。
/** @jsx h */ import { h, Head } from &amp;#34;../deps.ts&amp;#34;; export default function Home() { return ( &amp;lt;div&amp;gt; &amp;lt;Head&amp;gt; &amp;lt;title&amp;gt;Hello&amp;lt;/title&amp;gt; &amp;lt;/Head&amp;gt; &amp;lt;h2&amp;gt;Home&amp;lt;/h2&amp;gt; &amp;lt;/div&amp;gt; ); } https://github.</description></item><item><title>2021/09/27〜2021/10/03の最新情報</title><link>https://uki00a.github.io/deno-weekly/articles/2021/10/03.html</link><pubDate>Sun, 03 Oct 2021 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/2021/10/03.html</guid><description>DenoのNode.js互換モードについて denoland/deno#12295のissueで、DenoにNode.jsの互換モードを提供することが提案されています。
Denoを実行する際に--compatオプションを指定すると、Node.jsの組み込みモジュールの読み込みが有効化されるように提案されています。
$ deno run --compat main.mjs こちらの機能の実装はdenoland/deno#12293のPRにて進行中です。
今のところ、Import mapsとdeno_std/nodeを併用することで、Node.jsの組み込みモジュールを読み込めるように実装されているようです。
https://github.com/denoland/deno/issues/12295 https://github.com/denoland/deno/pull/12293 Deno v1.14.2 Deno v1.14.2がリリースされました。
このリリースはバグ修正やパフォーマンスの最適化などがメインです。
主な変更点:
deno fmtやdeno testで.mkd, .mkdn, .mdwn, .mdown, 及び.markdownの拡張子のファイルがサポートされました 一度取り消しされたパーミッションが再び許可されないように修正されました Deno.HttpConnがすでに閉じられている場合にrespondWithを呼ぶと、プロセスがパニックする問題が修正されました 祖先のワーカーが閉じられたときまたは終了したときに、合わせて子孫のワーカーも閉じるまたは終了するように修正されました 祖先のワーカーが終了したもののその子孫に生きているワーカーが存在する場合、プロセスがパニックする問題が修正されました WindowsでDeno.killがサポートされました Request/Response/Eventオブジェクトの生成、Headersオブジェクトの内部実装、パーミッションチェックなどが最適化されました https://github.com/denoland/deno/releases/tag/v1.14.2
deno_std v0.109.0 deno_std v0.109.0がリリースされました
変更点:
node: stream/webの部分的なサポートが追加されました node/events: EventEmitter.callを呼べない問題が修正されました node/module: .mjsファイルをrequireできないように修正されました https://github.com/denoland/deno_std/releases/tag/0.109.0
lint.deno.landがDeno Deployへ移行 deno_lintの公式サイトであるlint.deno.landがDeno Deployへ移行されました。
それに合わせて、内部実装がdext.ts+Tailwind CSSからFresh+Twindへ移行されています。
DenoやDeno Deployなどでフロントエンド開発を行う際に参考になるかもしれないため、興味のある方はソースコードも見てみるとよいかもしれません。
https://github.com/denoland/deno_lint/pull/905</description></item><item><title>2021/09/20〜2021/09/26の最新情報</title><link>https://uki00a.github.io/deno-weekly/articles/2021/09/26.html</link><pubDate>Sun, 26 Sep 2021 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/2021/09/26.html</guid><description>Deno v1.14.1 Deno v1.14.1がリリースされました。
このリリースはバグ修正がメインです。
変更点:
非async関数でfor-awaitを使用したときのエラーメッセージが改善されました v1.14.0で追加されたファイルロックAPIの型定義がlib.deno.ns.d.tsからlib.deno.unstable.d.tsに移動しました deno docでドキュメントを表示する際に、—unstableが必要になるなどの影響があります. (例: deno doc --builtin --unstable Deno.flock) スタックトレース中のData URLの表示が改善されました HMACキーをJSON Web Key形式でエクスポートできない問題が修正されました Deno.readFileの最適化 https://github.com/denoland/deno/releases/tag/v1.14.1
deno_std v0.108.0 deno_stdのv0.108.0がリリースされました。
変更点:
collections: maxWithとminWithに渡した配列にundefinedが含まれていた場合、要素の並び順によって結果が異なってしまう問題が修正されました
collections: maxBy, minBy, 及びsortByのselector引数でbigintやDateを返却できるように型定義が修正されました
testing/asserts: assertThrowsやassertRejectsでコールバックがサポートされました
import { assertEquals, assertRejects } from &amp;#34;https://deno.land/std@0.108.0/testing/asserts.ts&amp;#34;; await assertRejects(() =&amp;gt; { return Promise.reject(new Error(&amp;#39;foo&amp;#39;)); }, (error: Error) =&amp;gt; { assertEquals(error.message, &amp;#39;foo&amp;#39;); }); https://github.</description></item><item><title>2021/06/21〜2021/06/27の最新情報</title><link>https://uki00a.github.io/deno-weekly/articles/2021/06/27.html</link><pubDate>Sun, 27 Jun 2021 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/2021/06/27.html</guid><description>Deno v1.11.2がリリースされました Deno v1.11.2がリリースされました。
このリリースでは、deno lspへの機能追加やWeb標準との互換性の向上などが実施されています。
変更点:
deno lspでリントエラーを無視するためのクイックフィックスアクションが実装されました。 deno lspで文字列やコメント中に現れた識別子がリネームされないように修正されました。 Deno.emit()のmoduleオプションで&amp;quot;es2020&amp;quot;がサポートされました。 Console, URL, URLSearchParams, 及びWebsocketオブジェクトがWPTにパスするように修正されました。 fetchでHEADまたはOPTIONSリクエストを送信する際はレスポンスボディが空になるように修正されました。 WorkerがURLオブジェクトを受け付けるようになりました。 https://github.com/denoland/deno/releases/tag/v1.11.2
Deno DeployのBeta 1がリリースされました Deno DeployのBeta 1がリリースされました。
主な変更点:
BroadcastChannelを使用したエッジワーカー間での通信がサポートされました。(https://deno.com/deploy/docs/runtime-broadcast-channel) カスタムのTLS証明書のサポート https://deno.com/blog/deploy-beta1
fresh - Deno Deployで動作するWebフレームワーク freshというDeno Deploy上で動作するPreactをベースにしたWebフレームワークが公開されました。
特徴:
設定が不要 Next.jsライクなファイルシステムベースのルーティングやAPI Routesなどをサポートしています。 ページのレンダリングはエッジワーカー上で実行されるため、事前のビルドステップが必要ありません。 https://github.com/lucacasonato/fresh
xml - Denoで動作するXMLモジュール xmlはDenoで動作するXMLモジュールです。
XMLドキュメントのパースやJavaScriptオブジェクトからXMLドキュメントへの変換などがサポートされています。
https://github.com/lowlighter/xml</description></item></channel></rss>