<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>release on 週刊Deno</title><link>https://uki00a.github.io/deno-weekly/categories/release.html</link><description>Recent content in release on 週刊Deno</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sun, 23 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://uki00a.github.io/deno-weekly/categories/release/index.xml" rel="self" type="application/rss+xml"/><item><title>Deno v2.2</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v2.2.html</link><pubDate>Sun, 23 Feb 2025 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v2.2.html</guid><description>Deno v2.2がリリース (deno lintでJavaScriptプラグインがサポート, deno lintにReact/JSX関連のルールが追加, `deno lint --rules`の挙動が変更, WebTransportの実験的サポート, `Deno.cwd()`でパーミッションが不要化, `Deno.cpuUsage()`が実装, OpenTelemetry - `Deno.serve()`に関するMetricsの拡充, `node:sqlite`が実装, `Temporal.ZonedDateTime#getTimeZoneTransition`が実装, `createImageBitmap()`の互換性が改善, Web Cache APIでlscacheバックエンドがサポート, deno outdatedで依存関係の対話的更新がサポート, deno taskでワイルドカード指定によるタスクの一括実行がサポート, deno checkで`compilerOptions.rootDirs`がサポート, deno compileでsloppy importsがサポート, deno jupyterでGPUTextureとGPUBufferの表示がサポート, `Deno.bench`に`warmup`と`n`オプションが再導入, TypeScript v5.7, V8 v13.4)</description></item><item><title>Deno v2.1</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v2.1.html</link><pubDate>Sun, 24 Nov 2024 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v2.1.html</guid><description>Deno v2.1がリリース。WASMモジュールのサポート, deno outdatedという新規コマンドが追加, deno taskでタスク間の依存関係を定義できるように, deno taskでDeno workspacesがサポート (--filterオプション), deno task --eval, deno init --npm (pnpm create相当のコマンド), deno compileでローカルファイル/ディレクトリの埋め込みがサポート, deno fmtでSQLのフォーマットが実験的にサポート, deno fmtとdeno lintで.gitignoreがサポート, DENO_TRACE_PERMISSIONS環境変数の導入, --env-fileで複数の.envファイルの読み込みがサポート, --allow-envで特定の名前で始まる環境変数を一括で許可できるように, Deno.telemetry (OpenTelemetryの実験的サポート), --unstable-detect-cjsの安定化, --unstable-node-globalsオプションの導入, fetch()のリクエストボディでのAsyncIterableサポートが再導入</description></item><item><title>Deno v1.46</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v1.46.html</link><pubDate>Sun, 25 Aug 2024 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v1.46.html</guid><description>Deno v1.46がリリース。Deno v2.0のリリースについて, deno cleanコマンドが追加, deno removeコマンドが追加, deno &amp;lt;entrypoint&amp;gt;, deno run &amp;lt;task&amp;gt;, パーミッションフラグの短縮形式の導入, deno serve --parallel, deno fmtでYAML/CSS/HTML/Vueなどの形式がサポート, deno compileがコード署名に対応, deno lintにno-node-globalsルールが追加, deno upgradeがRCバージョンに対応, deno addがdist tagsに対応, deno publishでライセンスが未定義の場合にエラーが発生するように, deno checkとdeno cacheがglob形式に対応, deno.lock v4, JSRパッケージへのパッチ, HMRの安定化, --env-fileが追加, ヘルプの改善, Node.js互換性の改善 (LinuxとMac限定でPlaywrightが動くように), 廃止されたTemporal APIの削除, Deno.watchFsでrenameイベントがサポート, fetchのbodyでAsyncIterableがサポート, など</description></item><item><title>Deno v1.45</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v1.45.html</link><pubDate>Sun, 14 Jul 2024 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v1.45.html</guid><description>Deno v1.45がリリース。Denoのワークスペースサポートの改善, npm workspacesのサポート, npmパッケージのライフサイクルスクリプトのサポート (--allow-scripts), --frozen(--frozen-lockfile)のサポート, deno init --lib, deno compileで--envオプションがサポート, deno jupyterでpromptとconfigがサポート, deno testで__tests__がサポート, deno lspでの複数deno.jsonの取り扱いの改善, TypeScript v5.5へのアップデート, --lock-writeとdeno vendorの非推奨化, Blob#bytesの実装, など</description></item><item><title>Deno v1.44</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v1.44.html</link><pubDate>Sun, 02 Jun 2024 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v1.44.html</guid><description>Deno v1.44がリリース。.npmrcのサポート, Node.js互換性の改善によりNext.jsが動作するように, Deno.exitCodeが追加, FFIでi64とu64が常にbigintで取り扱われるように, DENO_FUTURE=1が指定された際は--unstable-*なしでFFIやWebGPUが利用できるように, Deno.upgradeWebSocketのidleTimeoutのデフォルト値が変更, RequestとResponseでbytesメソッドが実装, deno testで時間がかかっているテストケースへ警告が表示されるように, deno lintにno-boolean-literal-for-argumentsルールが追加, deno serveに--port=0を指定するとランダムなポートが採番されるように, v8のPointer Compressionの有効化, キャッシュ用のSQLiteデータベースでWALモードが有効化, など</description></item><item><title>Deno v1.43</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v1.43.html</link><pubDate>Sun, 05 May 2024 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v1.43.html</guid><description>Deno v1.43がリリース。deno serveコマンドの追加, compilerOptions.jsxImportSourceTypesやcompilerOptions.jsxPrecompileSkipElementsなどの独自オプションの導入, Import mapsへのworkspaceメンバーの自動登録がサポート, Deno.UnsafeWindowSurfaceでのWaylandのサポート, deno taskでのnpmバイナリの実行がサポート, URL.parseやFloat16Arrayのサポート, deno lspのパフォーマンス改善, V8コードキャッシュの導入などが行われています。</description></item><item><title>Deno v1.42</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v1.42.html</link><pubDate>Sun, 31 Mar 2024 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v1.42.html</guid><description>Deno v2に向けてdeno installに--globalオプションが追加, deno lintでQuickfixがサポート, deno taskでのリダイレクトサポートの改善, deno testのJUnitレポーターでのサブステップの取り扱いが改善, vendorディレクトリの取り扱いの変更, --watch-excludeオプションの追加, TypeScript v5.4へのアップデート, EventSourceの安定性の改善, など</description></item><item><title>Deno v1.41</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v1.41.html</link><pubDate>Sun, 25 Feb 2024 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v1.41.html</guid><description>Deno.FsFileにisTerminalとsetRawメソッドが追加, Deno.DatagramConnとHttpClientからridプロパティが削除, deno lintにno-slow-typesルールが導入, deno publishの実行時に型チェックが行われるように, denortバイナリがさらに軽量化, process.envの参照時にパーミッションプロンプトが表示されるように挙動が変更</description></item><item><title>Deno v1.40</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v1.40.html</link><pubDate>Sun, 28 Jan 2024 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v1.40.html</guid><description>Temporalサポート, Decorators proposal (stage 3)のサポート, Import Mapsで`npm:`URLのマッピングを定義する際の挙動の改善, deno checkでのunstable APIに関する挙動の変更, windowやrid関連のAPIなどの非推奨化, Unixドメインソケットサポートなどの安定化, External WebGPU surfaces / BYOW (Bring your own Window), deno lintで`no-console`ルールがサポート, import.meta.filename/dirname, deno.lockにworkspaceセクションが追加</description></item><item><title>Deno v1.39</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v1.39.html</link><pubDate>Sun, 17 Dec 2023 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v1.39.html</guid><description>WebGPU APIの再導入, deno coverageでHTMLレポーターがサポート, Deno.cronでオブジェクト形式でのスケジューリングがサポート, Deno.Kvのenqueueでリトライポリシーをカスタマイズできるように, deno compileでBYONMがサポート, sloppy importsのサポートなど, TypeScript v5.3へのアップデート, など</description></item><item><title>fresh v1.6</title><link>https://uki00a.github.io/deno-weekly/articles/fresh/v1.6.html</link><pubDate>Sun, 03 Dec 2023 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/fresh/v1.6.html</guid><description>fresh v1.6がリリース。Tailwind CSSの公式サポート, FreshContext型の導入, Partialsでの&amp;lt;form&amp;gt;やリダイレクトのサポート, プラグインからのIslandコンポーネントや静的アセットの提供などがサポートされています。</description></item><item><title>Deno v1.38</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v1.38.html</link><pubDate>Sun, 05 Nov 2023 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v1.38.html</guid><description>Deno v1.38がリリースされました。deno docでリント(--lint)やHTMLページの生成(--html)がサポート / Deno本体でHMRがサポート。(--unstable-hmr) / --unstable-*がサポート / deno.jsonでunstableフィールドがサポート / `compilerOptions.jsx`で`&amp;#34;precompile&amp;#34;`がサポート / .envのサポート (--envオプション) / Deno.cronが実装 / npmなどで作成されたnode_modulesのサポート (BYONM) など...</description></item><item><title>fresh v1.5</title><link>https://uki00a.github.io/deno-weekly/articles/fresh/v1.5.html</link><pubDate>Sun, 15 Oct 2023 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/fresh/v1.5.html</guid><description>fresh v1.5がリリース。SPAライクなクライアントサイドナビゲーションを実現するために、Partialsという機能が導入されました。</description></item><item><title>Deno v1.37</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v1.37.html</link><pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v1.37.html</guid><description>Deno v1.37がリリースされました。
この記事では主な変更点などについて解説します。
実験的なパッケージマネージャが実装 (jsr:URL) ⚠️この機能は実験的機能のようなので、今後、大きな変更が入る可能性があります。
⚠️また、パッケージレジストリがまだ公開されていないため、この機能はまだ利用できない状態のようです。
Deno本体に実験的なパッケージマネージャーが実装されています。
具体的には、以下のようにjsr:形式のURLを記述することで、Denoがパッケージレジストリと連携してsemverの解決などを行いつつ、パッケージのインストールなどを自動で行ってくれるようです。
import { foo } from &amp;#34;jsr:@foo/some_pkg@1/mod.ts&amp;#34;; 例えば、この場合、@foo/some_pkgパッケージに関するsemverの解決を行うために、まずhttps://${DENO_REGISTRY_URL}/@foo/some_pkg/meta.jsonの問い合わせを行い、その内容を元にどのバージョンをインストールすべきか判断されるようです。
従来のhttps:やnpm:形式のパッケージと同様に、npm installなどのコマンドの実行は不要で、スクリプトの実行時にDenoが必要に応じてパッケージをインストールしてくれます。
また、パッケージのインストール元レジストリはDENO_REGISTRY_URL環境変数で変更可能なようです。
ここからは推測になりますが、この機能は、元々、導入される予定であったdeno:URLに相当する機能だと思われます。
Deno本体がレジストリと連携してsemver解決を行うことで、依存関係の重複問題などを解消しようというのがこの機能の狙いだと思われます。
feat(unstable): package manager #20517
Built-in support for semvered specifiers on the deno.land/x registry #17495
deno jupyter Deno本体にJupyter Kernelが実装されました。
以下のコマンドを実行すると、Deno Kernelがインストールされているかどうかを確認できます。
$ deno jupyter --unstable ℹ️ Deno kernel is not yet installed, run `deno jupyter --unstable --install` to set it up もしインストールされていなければ、以下のコマンドでインストールできます。</description></item><item><title>fresh v1.4</title><link>https://uki00a.github.io/deno-weekly/articles/fresh/v1.4.html</link><pubDate>Sun, 20 Aug 2023 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/fresh/v1.4.html</guid><description>fresh v1.4がリリース。オプトイン方式での事前ビルドのサポート、Route Groupsやレイアウト機能の実装などが実施されています。</description></item><item><title>Deno v1.36</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v1.36.html</link><pubDate>Sun, 06 Aug 2023 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v1.36.html</guid><description>Deno v1.36がリリースされました。
この記事では主な変更点などについて解説します。
--deny-*オプション --deny-*という新しいオプションが導入されました。このオプションにより、Denoに対して特定の操作のみを明示的に拒否させることができます。
例えば、以下の場合、Denoにwrite権限のみを拒否させています。
$ deno run --allow-all --deny-write main.js このように--allow-*オプションと--deny-*オプションは併用することが可能で、その場合、--deny-*オプションの方が優先されます。
また、--deny-*には--allow-*と同様に、リスト形式で対象を指定することもできます。
$ deno run --allow-read --deny-read=README.md main.js 上記の場合、./README.mdへの読み込みのみが拒否され、それ以外のファイルの読み込みは許可されます。
{ const content = await Deno.readTextFile(&amp;#34;Makefile&amp;#34;); // =&amp;gt; OK console.info(content); } { const content = await Deno.readTextFile(&amp;#34;README.md&amp;#34;); // =&amp;gt; PermissionDenied console.info(content); } deno_modulesディレクトリの導入 ⚠️この機能はまだunstableという扱いのため、今後、機能などに変更が入る可能性があります。
また、現在、deno_modulesをvendorにリネームするPRも作成されており、今後ディレクトリやオプションなどの名前が変わる可能性も高そうです。
feat(unstable): rename deno_modules to vendor #20065 deno.jsonにdenoModulesDirという新しいオプションが導入されました。
このオプションにtrueを設定すると、リモートモジュールがdeno_modulesというディレクトリにダウンロードされるように挙動が変更されます。
{ &amp;#34;denoModulesDir&amp;#34;: true } この状態でスクリプトを実行すると、依存しているリモートモジュールがdeno_modulesに保存されます。
import { blue } from &amp;#34;https://deno.</description></item><item><title>fresh v1.3</title><link>https://uki00a.github.io/deno-weekly/articles/fresh/v1.3.html</link><pubDate>Sun, 23 Jul 2023 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/fresh/v1.3.html</guid><description>fresh v1.3がリリースされました。
この記事では主な変更点などについて解説します。
非同期Routeコンポーネント 非同期Routeコンポーネントがサポートされました。
例えばデータベースや外部のAPIなどから非同期に取得したデータをRouteコンポーネントに渡すためには、今までは以下のようにhandlerを定義する必要がありました。
// routes/users/[id].tsx import type { Handlers, PageProps } from &amp;#34;$fresh/server.ts&amp;#34;; export const handler: Handlers&amp;lt;Data&amp;gt; = { async GET(req, ctx) { const user = await findUserByID(ctx.params.id); if (user == null) { return ctx.renderNotFound(); } const resp = await ctx.render(user); return resp; }, }; export default async function User(props: PageProps&amp;lt;User&amp;gt;) { return &amp;lt;UserDetail user={props.data} /&amp;gt;; } 非同期Routeコンポーネントを利用することで、handlerを記述せずに非同期でのデータの取得とコンポーネントのレンダリングが行えるようになります。</description></item><item><title>Deno v1.35</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v1.35.html</link><pubDate>Sun, 09 Jul 2023 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v1.35.html</guid><description>Deno v1.35がリリースされました。
この記事では主な変更点などについて解説します。
Deno API Deno.serveの安定化 Denoに組み込まれたHTTPサーバを起動するためのAPIであるDeno.serveが安定化されました。今後は--unstableを指定しなくても利用できます。
const ac = new AbortController(); setTimeout(() =&amp;gt; ac.abort(), 10000); const server = Deno.serve({ signal: ac.signal, }, (req) =&amp;gt; new Response(&amp;#34;Hello Deno!&amp;#34;)); await server.finished; これに合わせて、Deno.connectTlsのalpnProtocolsオプションも安定化されています。
Deno.listenTlsのalpnProtocolsオプションについては、おそらくv1.35.1で正式に安定化されるのではないかと思います。
新しいAPI Deno.errors配下に以下の新しいエラーが追加されています:
NotADirectory FilesystemLoop IsADirectory NetworkUnreachable また、Deno.AtomicOperationが公開されています (今までは型定義のみが公開されていて、Deno名前空間では実際には定義されていませんでした)
Web API ReadableStream.from ReadableStream.fromが実装されました。AsyncIteratorなどからReadableStreamを作成することができます。
function sleep(ms) { return new Promise((ok) =&amp;gt; setTimeout(ok, ms)); } async function* gen() { for (let i = 0; i &amp;lt; 5; i++) { await sleep(i * 1000); yield i; } } const readableStream = ReadableStream.</description></item><item><title>fresh v1.2</title><link>https://uki00a.github.io/deno-weekly/articles/fresh/v1.2.html</link><pubDate>Sun, 18 Jun 2023 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/fresh/v1.2.html</guid><description>fresh v1.2がリリースされました。
この記事では主な変更点などについて解説します。
このリリースに合わせて、PreactのメンテナーであるMarvin Hagemeister氏がDeno社に入社されたことが発表されています。これからMarvin Hagemeister氏を中心に、フルタイムでFreshの開発が進められていくことが計画されているようです。
アップデートについて freshはアップデート用のスクリプト(update.ts)を提供しています。
以下のコマンドを実行すると、v1.2へアップデートすることができます。
$ deno run -A -r https://fresh.deno.dev/update . また、このバージョン以降からinit.ts (freshのプロジェクト初期化用のスクリプト)で作成したプロジェクトでは、deno task updateでもfreshをアップデートすることができます。
Islandコンポーネントに関する改善 props.childrenのサポート Islandコンポーネントでprops.childrenがサポートされました。
import type { PageProps } from &amp;#34;$fresh/server.ts&amp;#34;; import Collapse from &amp;#34;../islands/Collapse.tsx&amp;#34;; function Content() { return &amp;lt;div&amp;gt;foobar&amp;lt;/div&amp;gt;; } export default function Index(props: PageProps) { return ( &amp;lt;Collapse&amp;gt; &amp;lt;Content /&amp;gt; &amp;lt;/Collapse&amp;gt; ); } またIslandコンポーネントをネストすることもできます。
export default function Index(props: PageProps) { return ( &amp;lt;Collapse&amp;gt; &amp;lt;Collapse&amp;gt; &amp;lt;Content /&amp;gt; &amp;lt;/Collapse&amp;gt; &amp;lt;/Collapse&amp;gt; ); } 制限として、children以外のpropsにコンポーネントを渡すことはまだサポートされていません。</description></item><item><title>Deno v1.34</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v1.34.html</link><pubDate>Sun, 28 May 2023 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v1.34.html</guid><description>Deno v1.34がリリースされました。
この記事では主な変更点などについて解説します。
deno.json(c)の拡張 トップレベルのexcludeフィールドがサポート deno fmtやdeno lintなどの各コマンドで共通の除外対象ファイルを定義できます。
また、トップレベルのexcludeに加えてfmt.excludeやlint.excludeなども一緒に定義されている場合は、それらへマージされます。
例えば、以下のような設定があったとします。
{ &amp;#34;fmt&amp;#34;: { &amp;#34;exclude&amp;#34;: [ &amp;#34;fresh.gen.ts&amp;#34;, &amp;#34;README.md&amp;#34; ] }, &amp;#34;lint&amp;#34;: { &amp;#34;exclude&amp;#34;: [ &amp;#34;fresh.gen.ts&amp;#34; ] } } Deno v1.34以降であれば、以下のように設定をまとめることができます。
{ &amp;#34;exclude&amp;#34;: [ &amp;#34;fresh.gen.ts&amp;#34; ], &amp;#34;fmt&amp;#34;: { &amp;#34;exclude&amp;#34;: [ &amp;#34;README.md&amp;#34; ] } } globのサポート include/excludeやtasksなどでglob形式で対象を定義することができます。
{ &amp;#34;lint&amp;#34;: { &amp;#34;exclude&amp;#34;: [&amp;#34;generated/**/*.ts&amp;#34;] }, &amp;#34;tasks&amp;#34;: { &amp;#34;my_task&amp;#34;: &amp;#34;cat vendor/**/*.</description></item><item><title>Deno v1.33</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v1.33.html</link><pubDate>Sun, 30 Apr 2023 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v1.33.html</guid><description>Deno v1.33がリリースされました。
この記事では主な変更点などについて解説します。
dynamic importに関するパーミッションチェックの見直し 静的に解析可能なdynamic importの実行時に、パーミッションが要求されないように挙動が変更されました。
このリリース以降、以下のコードを実行する際に--allow-netの指定が不要になります。(v1.32までは--allow-netが要求されます)
const { delay } = await import(&amp;#34;https://deno.land/std@0.185.0/async/delay.ts&amp;#34;); await delay(3000); ただし、以下のようにURLを動的に構築している場合などは、従来通り--allow-netの指定が必要です。
// Denoが`import()`の引数を静的に解析できない場合は、従来どおりパーミッションが要求されます const { delay } = await import(`https://deno.land/std@0.185.0/async/${&amp;#34;delay.ts&amp;#34;}`); await delay(3000); Deno KV Deno.AtomicOperationにmin/maxメソッドが追加 minは引数で指定された値と現在の値を比較し、小さい方の値でエントリを上書きします。maxはその逆の操作です。
const kv = await Deno.openKv(&amp;#34;:memory:&amp;#34;); const result = await kv.set([&amp;#34;key&amp;#34;], new Deno.KvU64(1n)); const commitResult = await kv.atomic() .check({ key: [&amp;#34;key&amp;#34;], versionstamp: result.versionstamp }) .max([&amp;#34;key&amp;#34;], 2n) .commit(); assert(commitResult.ok); const result2 = await kv.</description></item><item><title>Deno v1.32</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v1.32.html</link><pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v1.32.html</guid><description>Deno v1.32がリリースされました。
この記事では主な変更点などについて解説します。
WebGPU APIの削除 Deno v1.8で追加されたWebGPU APIが削除されました。
バイナリサイズや起動速度に影響があったというのが理由のようです。
ただし、削除は一時的なもののようで、将来的には再びWebGPU APIが追加される想定のようです。
KVストア Deno本体にKVストアが実装されています。
ただし、こちらについてはまだ公式では紹介などはされておらず、今後、APIなどに大きな変更が入る可能性もあります。
詳細については、以下の記事を参照いただければと思います。
Deno v1.32でKVストアが実装されました TypeScript TypeScript v5.0.2へのアップデート Deno内部に搭載されているTypeScriptがv5.0.2へアップデートされました。
ただし、制限として、ES Decoratorsのサポートについては現時点では除外されているようです。
--allを指定しなかった際の初回の型チェックの実行が高速化 Denoでは型チェックの実行結果をSQLiteにキャッシュしておくことで、型チェックの効率化を図っています。
しかし、初回の型チェック実行時についてはこのキャッシュの仕組みが効かないため、型チェックの実行効率が少し落ちてしまいます。
この問題を解消するために、--allが指定されていない際は、ローカルのファイルのみを型チェックするように挙動が変更されました。
これによって、キャッシュが効いていない場合でも、場合によっては2倍程度の高速化が見られることもあるようです。
CLIに関する改善 deno compileでdynamic importとWeb Workerがサポート deno compileでdynamic importとWeb Workerを使用したコードのバイナリが作成できるようになりました。
例えば、以下のようなファイルがあったとします。
// sum.js export function sum(...numbers) { return numbers.reduce((a, b) =&amp;gt; a + b, 0); } // main.js const { sum } = await import(&amp;#34;./sum.js&amp;#34;); console.info(sum(1, 2, 3)); このようにシンプルなケースでは、特に設定などは不要でうまく動いてくれます。
$ deno compile -o main main.</description></item><item><title>Deno v1.31</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v1.31.html</link><pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v1.31.html</guid><description>Deno v1.31がリリースされました。
この記事では主な変更点などについて解説します。
package.jsonサポート Denoでpackage.jsonがサポートされました。
具体的には、以下のような機能などが実装されています。
package.jsonの自動探索 dependencies/devDependenciesの定義内容によるbare specifierの解決 deno taskによるscriptsの実行 package.jsonの自動探索 deno.jsonなどのファイルと同様に、Denoがpackage.jsonも自動で探索してくれるようになりました。
もしpackage.jsonが見つかった場合、必要に応じてdependenciesやdevDependenciesで記述された依存パッケージを自動でダウンロードし、デフォルトでnode_modulesディレクトリに保存してくれます。 (従来通り、package.jsonが存在しない状態でnpm:経由でnpmパッケージをimportした際は、--node-modules-dirを指定しない限り、node_modulesは作成されません)
もし、package.jsonの自動探索を無効化したい場合は、以下のいずれかの手段で無効化できます (以下の機能は、それぞれ次のリリースであるv1.31.1で追加された機能のためご注意！)
--no-configまたは--no-npmオプションを指定する。 DENO_NO_PACKAGE_JSON環境変数に1を指定する dependencies/devDependenciesによるbare specifierの解決 Denoがpackage.jsonのdependenciesやdevDependenciesで定義された依存関係を元に、Import Mapsライクにbare specifierを解決してくれるようになりました。
例えば、以下のような内容のpackage.jsonが存在したとします。
{ &amp;#34;dependencies&amp;#34;: { &amp;#34;chalk&amp;#34;: &amp;#34;^5.2.0&amp;#34;, &amp;#34;koa&amp;#34;: &amp;#34;2&amp;#34; } } この場合、アプリケーションでは以下のようにbare specifierを記述することがでます。
import chalk from &amp;#34;chalk&amp;#34;; // =&amp;gt; `npm:chalk@^5.2.0` import Koa from &amp;#34;koa&amp;#34;; // =&amp;gt; `npm:koa@2` const app = new Koa(); app.use((ctx) =&amp;gt; { ctx.body = &amp;#34;Hello world&amp;#34;; }); app.</description></item><item><title>Deno v1.30</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v1.30.html</link><pubDate>Sun, 29 Jan 2023 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v1.30.html</guid><description>Deno v1.30がリリースされました。
この記事では主な変更点などについて解説します。
Node.js互換性の改善 2023年 Q1のロードマップで発表されていたNode.js組み込みパッケージの利用が正式にサポートされました。
以下のように、node:&amp;lt;パッケージ名&amp;gt;の形式でimportを記述すると、Node.js組み込みパッケージをDenoから利用することができます。
import { EventEmitter } from &amp;#34;node:events&amp;#34;; const emitter = new EventEmitter(); emitter.on(&amp;#34;foo&amp;#34;, console.log); emitter.emit(&amp;#34;foo&amp;#34;, &amp;#34;bar&amp;#34;); また、Node-APIの互換性の改善も引き続き実施されており、以下のAPIなどの互換性が向上されています。
napi_adjust_external_memory napi_detach_arraybuffer napi_is_detached_arraybuffer deno.jsonでのImport Mapsの定義がサポート こちらも2023年 Q1のロードマップで発表されていた機能になります。
deno.jsonでimportsやscopesなどが定義されていると、--import-map使用時と同様に、deno.jsonの定義内容を元にDenoがbare specifierが解釈してくれます。
例えば、以下のような内容のdeno.jsonが存在したとします。
{ &amp;#34;imports&amp;#34;: { &amp;#34;dax&amp;#34;: &amp;#34;https://deno.land/x/dax@0.24.0/mod.ts&amp;#34; } } この場合、ソースコードでは以下のようにしてdaxモジュールを利用することができます。
import { $ } from &amp;#34;dax&amp;#34;; await $`echo foobar`; deno fmtでセミコロンの有無を制御できるように 今まで、Denoに搭載されたフォーマッタであるdeno fmtコマンドでは、ソースコードにおける行末のセミコロンの有無をカスタマイズすることができませんでした。
今回のリリースでは、deno.jsonでfmt.options.semiColonsオプションがサポートされました。 このオプションにfalseを設定すると、deno fmtの実行時に行末のセミコロンが取り除かれます。
{ &amp;#34;fmt&amp;#34;: { &amp;#34;options&amp;#34;: { &amp;#34;semiColons&amp;#34;: false } } } また、--options-no-semicolonsオプションにより、CLI経由でセミコロンの有無を制御することも可能です。</description></item><item><title>Deno v1.29</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v1.29.html</link><pubDate>Sun, 18 Dec 2022 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v1.29.html</guid><description>Deno v1.29がリリースされました。
この記事では主な変更点などについて解説します。
サブプロセスAPIに関する変更 Deno.spawn, Deno.spawnSync, Deno.spawnChildの削除 Deno v1.28でDeno.Commandが実装されたため、下記のAPIが削除されています。
Deno.spawn Deno.spawnSync Deno.spawnChild このあたりの背景などについては、下記の記事で詳しく解説されています。
Deno.run と Deno.spawn と Deno.Command のどれを使えば良いのか また、Deno.Commandについてもv1.28.3でAPIが若干変更されています。
Deno.spawn系統のAPIからDeno.Commandへの移行について Deno.spawn()はDeno.Child#output(), Deno.spawnSync()はDeno.Child#outputSync()で代用できます。
const command = new Deno.Command(&amp;#34;deno&amp;#34;, { args: [&amp;#34;info&amp;#34;, &amp;#34;--json&amp;#34;], }); const status = await command.output(); if (status.success) { console.info(new TextDecoder().decode(status.stdout)); } Deno.spawnChild()はDeno.Child#spawn()で代用できます。
const command = new Deno.Command(&amp;#34;deno&amp;#34;, { args: [&amp;#34;fmt&amp;#34;, &amp;#34;--ext=json&amp;#34;, &amp;#34;-&amp;#34;], stdin: &amp;#34;piped&amp;#34;, stdout: &amp;#34;piped&amp;#34; }); const child = command.</description></item><item><title>Deno v1.28</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v1.28.html</link><pubDate>Sun, 20 Nov 2022 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v1.28.html</guid><description>Deno v1.28がリリースされました。
この記事では主な変更点などについて解説します。
npmパッケージサポートの安定化 Deno v1.25で実装されたnpmパッケージサポートが安定化されました。
今後は--unstableなしでnpmパッケージを読み込むことができます。
$ cat main.js import chalk from &amp;#34;npm:chalk@5.1.2&amp;#34;; console.log(chalk.green(&amp;#34;Deno&amp;#34;)); $ deno run --allow-read --allow-env main.js ただし、リモートモジュールの中にnpm:が含まれていた際は、従来どおり--unstableが要求されるため注意が必要そうです。
その他にも以下の改善などが実施されています。
peerDependenciesがサポート deno info --jsonでnpm:がサポート import.meta.resolveでnpm:が無効化 今後npmパッケージサポートに関して計画されている変更内容についてはロードマップを参照ください。
ロックファイルの自動適用と生成がサポート Denoにはアプリケーションが依存するサードパーティモジュールの内容を元にハッシュ値を計算し、ロックファイルと呼ばれるファイルに保存する機能があります。
アプリケーションを実行する際にサードパーティモジュールから再度ハッシュ値を計算し、ロックファイルに書き込まれたハッシュ値と比較することで、サードパーティモジュールの内容が改ざんされていないことを保証することができます。(インテグリティチェック)
この挙動を有効化するには、従来では--lockと--lock-writeの指定が必要でした。
このリリースでは、deno.json(c)が存在する場合、ロックファイル(deno.lock)の生成とインテグリティチェックが自動で実施されるように挙動が変更されました。
$ ls deno.json main.js $ deno run main.js $ ls deno.json deno.lock main.js この変更に合わせて、既存のオプションやインテグリティチェックに関する挙動も一部変更されています。
--lockオプションの引数がオプショナルに変更 (デフォルトはdeno.lock) ロックファイルに列挙されていないパッケージが見つかった際に、インテグリティチェックが失敗しないように挙動が変更 新しく検出されたパッケージについては、ハッシュが自動でロックファイルに書き込まれます。そのパッケージのインテグリティチェックについては、次回以降のDenoの実行から適用されます。 また、このロックファイルの自動適用と生成を無効化するために--no-lockという新しいオプションも追加されています。
Deno.Commandの追加 Deno.CommandというDenoからサブプロセスを生成するための新しいAPIが実装されました。
利用するには--unstableと--allow-runの指定が必要です。
使用例 コマンドの実行結果の非同期での取得:
const command = new Deno.</description></item><item><title>Deno v1.27</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v1.27.html</link><pubDate>Sun, 30 Oct 2022 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v1.27.html</guid><description>Deno v1.27がリリースされました。
この記事では主な変更点などについて解説します。
npmパッケージサポートの改善 Deno v1.25で追加されたnpmパッケージのサポートに関する改善が実施されています。
型チェックのサポート npm:で読み込んだnpmパッケージに対して型定義が適用されるようになりました
これにより、deno checkなどのコマンドを実行した際に、npmパッケージを使用しているコードについても適切に型チェックが実行されます。
import { default as stringWidth } from &amp;#34;npm:string-width@5.1.2&amp;#34;; console.info(stringWidth(&amp;#34;foo&amp;#34;)); // =&amp;gt; 3 console.info(stringWidth(123)); // =&amp;gt; 型エラー このように、型定義ファイルを同梱したパッケージについては、自動でそれが読み込まれて適用されます。
型定義ファイルを同梱していないパッケージについては、@deno-typesを使用することで型定義を適用することができます。
// @deno-types=&amp;#34;npm:@types/express@4.17.14&amp;#34; import { default as express } from &amp;#34;npm:express@4.18.2&amp;#34;; console.info(express(&amp;#34;foo&amp;#34;)); // =&amp;gt; 型エラー Node-APIのサポート Deno本体にNode-APIのサポートが入りました。
Node-APIは、CやC++などを使用してネイティブアドオンを記述するためにNode.jsから提供されている仕組みです。
import { compress, uncompress } from &amp;#34;npm:lz4-napi@2.2.0&amp;#34; const data = await Deno.readFile(&amp;#34;./deno.json&amp;#34;); const compressed = await compress(data); const uncompressed = await uncompress(compressed); Node-APIのサポートが入ったことにより、例えば、Prismaのクエリエンジンやnode-sqlite3などのパッケージも動かせる可能性が出てきました。</description></item><item><title>Deno v1.26</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v1.26.html</link><pubDate>Sun, 02 Oct 2022 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v1.26.html</guid><description>Deno v1.26がリリースされました。
この記事では主な変更点などについて解説します。
--allow-sysオプションの追加 Deno.osReleaseやDeno.systemMemoryInfoなどのシステム情報を取得するためのAPIの利用を制御するために、--allow-sysオプションが追加されました。
$ deno run --unstable --allow-sys=osRelease,systemMemoryInfo main.js 元々、これらのAPIを使うには--allow-envの指定が必要でした。
ただ、これらのAPIの利用に--allow-envを要求することの副作用として、全ての環境変数にアクセスできるようになってしまうという問題がありました。
この問題を解決するため、--allow-sysという新しいパーミッションが導入されました。
Cache APIのサポート DenoにCache APIが実装されました。
const cache = await caches.open(&amp;#34;v1&amp;#34;); const req = new Request(&amp;#34;https://example.com/&amp;#34;); console.assert(await cache.match(req) === undefined); const res = new Response(&amp;#34;foobar&amp;#34;); await cache.put(req, res); const cachedRes = await cache.match(req); console.assert(await cachedRes?.text() === &amp;#34;foobar&amp;#34;); 挙動について localStorageなどと同様にSQLiteをベースに実装されており、利用する際は特にパーミッションなどは要求されません。
ただし、localStorageとは異なり、DENO_DIRではなく/tmp/deno_cacheにSQLiteのデータベースやキャッシュされたコンテンツなどが保存されます。
制限 現時点では、いくつかの制限があるようです。
ignoreSearchやignoreMethodなどのクエリオプションはまだサポートされてないようです。 Cache.deleteを呼んだ際に、SQLiteデータベースに保存されたメタデータは削除されるものの、キャッシュされたコンテンツは削除されないようです。 npmパッケージサポートの改善 今回のv1.26のリリースでは、--no-npmオプションが実装されています。
これにより、npm:によるnpmパッケージのimportを無効化できます。
$ deno run --no-npm main.ts また、Denoでnpmパッケージのimportがサポートされたことにより、Deno v1.</description></item><item><title>Fresh v1.1</title><link>https://uki00a.github.io/deno-weekly/articles/fresh/v1.1.html</link><pubDate>Sun, 11 Sep 2022 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/fresh/v1.1.html</guid><description>Fresh v1.1がリリースされました。
この記事では主な変更点などについて解説します。
アップデート用スクリプトの追加 Freshのアップデート用スクリプトが追加されています。
$ deno run -A https://fresh.deno.dev/update . このスクリプトを実行すると、各種依存関係や後述するcompilerOptionsやTwindプラグインなどに関する変更が適用されます。
compilerOptions.jsxとcompilerOptions.jsxImportSourceのサポート Freshのプロジェクトの初期化時に、compilerOptions.jsxとcompilerOptions.jsxImportSourceが自動で設定されるようになりました。
これにより、.jsx/.tsxファイルで以下2行の指定が不要になります。
/** @jsx h */ import { h } from &amp;#34;preact&amp;#34;; 前述のアップデートスクリプトを実行すると、既存のプロジェクトにもこの設定が適用されます。
プラグインシステム ユーザがFreshの挙動を拡張できるようにするために、プラグインシステムが実装されました。
現時点では、生成されたHTMLに対するスクリプトやスタイルの注入などがサポートされています。将来的には、プラグイン経由でRouteやMiddlewareなどを追加できるようにすることが予定されているようです。
例として、公式でTwindプラグインが提供されており、start()のpluginsオプションで有効化できます。
// main.ts import { start } from &amp;#34;$fresh/server.ts&amp;#34;; import twindPlugin from &amp;#34;$fresh/plugins/twind.ts&amp;#34;; import manifest from &amp;#34;./fresh.gen.ts&amp;#34;; import twindConfig from &amp;#34;./twind.config.ts&amp;#34;; await start(manifest, { plugins: [twindPlugin(twindConfig)] }); このTwindプラグインを有効化すると、twを使わずにclassを指定できるようになります (PreactのOption Hooksを使用して twが自動で適用されます)
&amp;lt;div class=&amp;#34;font-bold&amp;#34;&amp;gt;foobar&amp;lt;/div&amp;gt; 前述のアップデートスクリプトを実行することで、twを使わずにclassを記述する形式へ自動で変換されます。
Preact Devtoolsのサポート Preact Devtoolsのサポートが追加されています。
devモード(deno task start)時は自動で有効化されるため、特に設定などは不要です。</description></item><item><title>Deno v1.25</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v1.25.html</link><pubDate>Sun, 28 Aug 2022 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v1.25.html</guid><description>Deno v1.25がリリースされました。
この記事では主な変更点などについて解説します。
npmパッケージのサポート Denoでnpmパッケージのimportや実行が実験的にサポートされました。
npm installやnode_modulesなどを必要とせずにnpmパッケージを利用することができます。
import express from &amp;#34;npm:express@4.18.1&amp;#34;; const app = express(); app.get(&amp;#34;/&amp;#34;, (req, res) =&amp;gt; { res.send(&amp;#34;Hello&amp;#34;); }); app.listen(3000); このファイルを実行すると、npmパッケージがダウンロードされた後、ExpressによってHTTPサーバが起動します。
$ deno run --unstable --allow-env --allow-read --allow-net main.mjs $ curl http://localhost:3000 Hello 他のサードパーティモジュールなどと同様に、初回実行時のみnpmパッケージがダウンロードされ、DENO_DIRにキャッシュされます。(DENO_DIR/npm/registry.npmjs.orgに保存されるようです)
また、npxライクにコマンドを実行することもできます。
$ deno run --unstable --allow-env --allow-read --allow-write npm:make-dir-cli@3.0.0 src/components 制限 現時点では利用するには--unstableが必要になります。 また、--allow-envや--allow-readも必要になります。 ロックファイル/型チェック/deno vendor/deno lsp/deno installなどでは、この機能はまだサポートされていません。 新しいHTTPサーバ (Flash) DenoにはHyperをベースにしたHTTPサーバ(Deno.serveHttp)が組み込まれています。
このHTTPサーバのさらなる高速化などを目的に、Flashという新しいHTTPサーバが実装されました。
Deno.serveというAPIによって、Flashを起動することができます。
const ac = new AbortController(); Deno.</description></item><item><title>Deno v1.24</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v1.24.html</link><pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v1.24.html</guid><description>Deno v1.24がリリースされました。
この記事では主な変更点などについて解説します。
--checkオプション指定時のトランスパイルの挙動が変更 tscがトランスパイル用途では使用されなくなりました。
型チェック トランスパイル --check (v1.23) tsc tsc --no-check (v1.23) - swc --check (v1.24) tsc swc --no-check (v1.24) - swc これにより、トランスパイルの効率化が見込まれます。
また、tscの実行結果をSQLiteにキャッシュする仕組みも導入されており、型チェックについても効率化が図られています。($DENO_DIR/check_cache_v1にSQLiteのデータベースファイルが作成されます)
FFI(Deno.dlopen)の改善 v1.23.3でV8 Fast API Calls+JITコンパイルの導入による最適化が実施されました。
今回のリリースでは、64ビット値を取り扱う関数に対してもV8 Fast API Callsを利用した最適化が適用されるように改善されています。
サブプロセスAPIへの変更 Deno v1.21 で入ったサブプロセスAPIに変更が加わっています。
Deno.Child.unref()とDeno.Child.ref()のサポート 挙動としてはDeno.refTimerやDeno.unrefTimerと同様で、Deno.Child.unref()を呼ぶと、対象の子プロセスがDenoの終了をブロックしなくなります。
const child = await Deno.spawnChild(&amp;#34;some_long_running_process&amp;#34;, { args }); child.unref(); (破壊的変更) Deno.Childの型定義が変更 Deno.spawnChildで返却されるDeno.Childのstdio関連のプロパティに関する型定義が変更されています。
v1.23.4</description></item><item><title>Deno v1.23</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v1.23.html</link><pubDate>Sun, 19 Jun 2022 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v1.23.html</guid><description>Deno v1.23がリリースされました。
この記事では主な変更点などについて解説します。
deno runやdeno cacheなどのコマンドでデフォルトの型チェックが無効化されました 下記コマンドで、デフォルトで型チェックが行われなくなります。
deno run deno cache deno eval deno repl 今後、型チェックを行いたい場合は、deno checkコマンドを使うか--checkオプションを指定する必要があります。
$ deno check mod.ts その他のdeno testなどのコマンドでは、引き続きローカルモジュールの型チェックがデフォルトで実行されます。
deno runが失敗する場合の対処方法 Denoは、型チェックを行わない場合、swcを使用してトランスパイルを行います。
その関係で、コードの実行時に、まれに問題が発生することがあるようです。
https://github.com/denoland/deno/issues/14900 問題に遭遇した場合は、--checkオプションを指定するとtscが使用されるため、問題を回避できる可能性があります。
$ deno run --check mod.ts Deno.sleepSync()の削除 Atomics.waitで代替可能であったり、イベントループを完全にブロックしてしまうなどの問題を抱えていたため、Deno.sleepSync()が削除されました。
Intl.v8BreakIteratorの削除 非標準APIであるため、Intl.v8BreakIteratorが削除されました。
代わりにIntl.Segmenterの使用が推奨されます。
deno taskコマンドの改善 --cwdオプションのサポート --cwdオプションにより、タスク実行時のカレントディレクトリを変更できるようになりました (デフォルトでは、deno.json(c)の配置場所がカレントディレクトリに設定されます)
$ deno task --cwd ./src build リダイレクションのサポート タスクの定義でリダイレクションがサポートされました。
{ &amp;#34;tasks&amp;#34;: { &amp;#34;test&amp;#34;: &amp;#34;echo foo &amp;gt; test.txt&amp;#34; } } また、/dev/nullにリダイレクトすると、出力が捨てられます (Windowsでも動きます)</description></item><item><title>Deno v1.22</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v1.22.html</link><pubDate>Sun, 22 May 2022 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v1.22.html</guid><description>Deno v1.22がリリースされました。
この記事では、主な変更点についてまとめていきます。
リモートモジュールの型チェックがデフォルトで無効化 deno runやdeno testなどの各コマンドでリモートモジュールの型チェックがデフォルトで無効化されました。
今後はローカルのTypeScriptファイルのみが型チェックされます。
もしリモートモジュールの型チェックも必要な際は--check=allオプションまたはdeno check --remoteを使用します。
また、次のv1.23のリリースでは、deno runやdeno cacheではデフォルトで一切型チェックが行われなくなる予定です。 (deno checkコマンドや--checkオプションなどで明示的に型チェックする必要があります)
例えば、CIでdeno cacheコマンドを実行して型チェックを行っている場合などは、今のうちにdeno checkコマンドに移行しておくとよいと思います。
# mod.tsの型チェックを行う $ deno check mod.ts # deno run実行時に型チェックも行う $ deno run --check main.ts 設定ファイルの読み込みの無効化 Denoはエントリポイントが存在するディレクトリまたはその上位のいずれかのディレクトリにdeno.json(c)というファイルが存在する場合、それを自動で読み込みます。
このリリースでは、新しく--no-configオプションがサポートされました。 このオプションを指定すると、deno.json(c)の自動探索を無効化できます。
$ deno run --no-config main.ts (破壊的変更) Worker内でデフォルトでDeno APIが有効化 今までは、Worker内でDeno.readFileなどのAPIを使用したい場合は、denoオプションによって明示的に有効化する必要がありました。
new Worker(new URL(&amp;#39;./worker.js&amp;#39;, import.meta.url).href, { deno: { namespace: true }, // Deno APIの使用を有効化 type: &amp;#34;module&amp;#34; }); 今後は上記のようにオプションを指定しなくても、Worker内で常にDenoのAPIを参照できます。
new Worker(new URL(&amp;#39;./worker.js&amp;#39;, import.meta.url).href, { type: &amp;#34;module&amp;#34; }); また、この変更の影響により、WorkerOptions.</description></item><item><title>Deno v1.21</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v1.21.html</link><pubDate>Sun, 24 Apr 2022 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v1.21.html</guid><description>Deno v1.21がリリースされました。
この記事では新機能や修正点などについて解説します。
deno checkコマンドの導入 新しいコマンドとしてdeno checkコマンドが追加されました。
挙動としては基本的にdeno cacheコマンドと同等で、与えられたモジュールの型チェック及びリモートモジュールのダウンロードを行います。
$ deno check mod.ts deno cacheコマンドとの違い deno cacheコマンドとの大きな違いとして、deno checkコマンドはデフォルトではリモートモジュールの型チェックを行いません。
deno checkコマンドでリモートモジュールの型チェックも行いたい場合は--remoteオプションを指定する必要があります。
deno runコマンドでの型チェックについて deno checkコマンドの追加による影響として、将来的にdeno runコマンドではデフォルトで型チェックが行われなくなる予定です。(Deno v1.21時点でもDENO_FUTURE_CHECK=1環境変数を設定することで、この挙動を有効化できます)
型チェックを行いたいときは、今回追加されたdeno checkコマンドまたはdeno run --checkで明示的に行う必要が出てきます。
新しいサブプロセスAPI (unstable) DenoにはDeno.run()というサブプロセスを生成するためのAPIがありますが、今回、新しく3種類のAPIが追加されました:
Deno.spawn() (高レベル) Deno.spawnChild() (低レベル) Deno.spawnSync() (Deno.spawnの同期版) これらのAPIの利用にはDeno.run()と同様に--allow-runパーミッションが必要です。
また、これらのAPIの追加により、Deno.run()は非推奨化される予定のようです。
Deno.spawn() これは高レベルAPIという位置づけです。
指定したコマンドを実行し、そのコマンドの実行結果(status)や標準出力(stdout)及び標準エラー出力(stderr)への出力内容を返却してくれます。
const { stdout, status } = await Deno.spawn(&amp;#34;echo&amp;#34;, { args: [&amp;#34;foo&amp;#34;], }); console.assert(&amp;#34;foo\n&amp;#34; === new TextDecoder().decode(stdout)); console.assert(status.success); コマンドの出力結果のみが必要で、細かな制御はいらない場合に便利かと思います。
Deno.spawnChild() こちらは低レベルAPIという位置づけです。
Deno.Reader/Deno.WriterではなくReadableStream/WritableStreamをベースに実装されています。
const child = Deno.</description></item><item><title>Deno v1.20</title><link>https://uki00a.github.io/deno-weekly/articles/deno/v1.20.html</link><pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate><guid>https://uki00a.github.io/deno-weekly/articles/deno/v1.20.html</guid><description>Deno v1.20がリリースされました。
この記事では新しく追加された機能などについて紹介します。
(破壊的変更) Deno.testのpermissionsオプションの挙動が変更 ⚠️ この変更はv1.20.1時点ではまだ反映されていません！
現在、正式な修正用のPRが作成されており、おそらくv1.20.2で反映されるはずです
https://github.com/denoland/deno/pull/14024 Deno.testやWorkerなどのAPIはpermissionsオプションにより実行時のパーミッションをカスタマイズできます:
Deno.test({ name: &amp;#34;permissions_test&amp;#34;, permissions: { read: true }, fn: async () =&amp;gt; { const content = await Deno.readTextFile(&amp;#34;./data.txt&amp;#34;); await Deno.writeTextFile(&amp;#34;./data.txt&amp;#34;, processContent(content)); }, }); 上記のテストコードはDeno.readTextFileとDeno.writeTextFileを実行しており、正しく実行するためには--allow-readと--allow-writeの両方の権限が必要です。
このテストケースでは、下記宣言により--allow-readを明示的に指定しています。
permissions: { read: true }, ここではwrite: trueが指定されていないため、このテストケースは権限エラーにより失敗するというのが直感的な挙動なのではないかと思います。
しかし、Deno v1.19時点では上記のテストコードは成功してしまいます。
permissions: { read: true }, 実は、Deno v1.19において、この指定は下記宣言と同義になります:
// `read`以外はすべてCLIオプションで指定された権限(--allow-writeなど)が継承される permissions: { read: true, env: &amp;#34;inherit&amp;#34;, ffi: &amp;#34;inherit&amp;#34;, hrtime: &amp;#34;inherit&amp;#34;, net: &amp;#34;inherit&amp;#34;, run: &amp;#34;inherit&amp;#34;, write: &amp;#34;inherit&amp;#34;, }, この挙動は直感的ではないということで、Deno v1.</description></item></channel></rss>